package fact

import (
	"testing"
	"time"

	"github.com/myrteametrics/myrtea-engine-api/v5/internals/reader"
	"github.com/myrteametrics/myrtea-engine-api/v5/internals/tests"
	"github.com/myrteametrics/myrtea-sdk/v4/engine"
	"github.com/myrteametrics/myrtea-sdk/v4/postgres"
)

func TestPersistFactResult(t *testing.T) {
	if testing.Short() {
		t.Skip("skipping postgresql test in short mode")
	}
	db := tests.DBClient(t)
	defer dbDestroy(db, t)
	dbInit(db, t)
	postgres.ReplaceGlobals(db)
	r := NewPostgresRepository(db)

	fact := engine.Fact{Name: "test_name", Comment: "test comment"}
	id, err := r.Create(fact)
	if err != nil {
		t.Error(err)
	}

	err = PersistFactResult(id, time.Date(2019, time.November, 2, 12, 00, 0, 0, time.UTC), 0, 0, &reader.Item{}, true)
	if err != nil {
		t.Error(err)
	}
}

func TestGetFactResultFromHistory(t *testing.T) {
	if testing.Short() {
		t.Skip("skipping postgresql test in short mode")
	}
	db := tests.DBClient(t)
	defer dbDestroy(db, t)
	dbInit(db, t)
	postgres.ReplaceGlobals(db)
	r := NewPostgresRepository(db)

	fact := engine.Fact{Name: "test_name", Comment: "test comment"}
	id, err := r.Create(fact)
	if err != nil {
		t.Error(err)
	}

	PersistFactResult(id, time.Date(2019, time.November, 2, 12, 00, 0, 0, time.UTC), 0, 0, &reader.Item{}, true)
	PersistFactResult(id, time.Date(2019, time.November, 2, 12, 30, 0, 0, time.UTC), 0, 0, &reader.Item{}, true)
	PersistFactResult(id, time.Date(2019, time.November, 2, 13, 00, 0, 0, time.UTC), 0, 0, &reader.Item{}, true)
	PersistFactResult(id, time.Date(2019, time.November, 2, 13, 30, 0, 0, time.UTC), 0, 0, &reader.Item{}, true)

	item, ts, err := GetFactResultFromHistory(id, time.Date(2019, time.November, 2, 13, 00, 0, 0, time.UTC), -1, 0, false, 0)
	if err != nil {
		t.Error(err)
	}
	if item == nil {
		t.Error("item not found")
	}
	if ts.UTC() != time.Date(2019, time.November, 2, 13, 00, 0, 0, time.UTC) {
		t.Error("invalid date time found", ts)
	}

	item, ts, err = GetFactResultFromHistory(id, time.Date(2019, time.November, 2, 13, 20, 0, 0, time.UTC), -1, 0, false, 0)
	if err != nil {
		t.Error(err)
	}
	if item != nil {
		t.Error("item found while it should not")
	}

	item, ts, err = GetFactResultFromHistory(id, time.Date(2019, time.November, 2, 20, 00, 0, 0, time.UTC), -1, 0, true, 0)
	if err != nil {
		t.Error(err)
	}
	if item == nil {
		t.Error("item not found")
	}
	if ts.UTC() != time.Date(2019, time.November, 2, 13, 30, 0, 0, time.UTC) {
		t.Error("invalid date time found", ts)
	}

	item, ts, err = GetFactResultFromHistory(id, time.Date(2019, time.November, 2, 13, 20, 0, 0, time.UTC), -1, 0, true, 30*time.Minute)
	if err != nil {
		t.Error(err)
	}
	if item == nil {
		t.Error("item not found")
	}
	if ts.UTC() != time.Date(2019, time.November, 2, 13, 00, 0, 0, time.UTC) {
		t.Error("invalid date time found", ts)
	}

	item, ts, err = GetFactResultFromHistory(id, time.Date(2019, time.November, 2, 13, 20, 0, 0, time.UTC), -1, 0, true, 10*time.Minute)
	if err != nil {
		t.Error(err)
	}
	if item != nil {
		t.Error("item found while it should not")
	}
}
