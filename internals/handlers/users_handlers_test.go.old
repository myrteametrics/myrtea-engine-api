package handlers

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"strconv"
	"testing"

	"github.com/go-chi/chi/v5"
	"github.com/jmoiron/sqlx"
	"github.com/myrteametrics/myrtea-engine-api/v5/internals/groups"
	"github.com/myrteametrics/myrtea-engine-api/v5/internals/tests"
	"github.com/myrteametrics/myrtea-engine-api/v5/internals/users"
	"github.com/myrteametrics/myrtea-sdk/v4/security"
)

func usersDBInit(dbClient *sqlx.DB, t *testing.T) {
	usersDBDestroy(dbClient, t)
	tests.DBExec(dbClient, `CREATE EXTENSION IF NOT EXISTS pgcrypto;`, t, true)
	tests.DBExec(dbClient, tests.UsersTableV1, t, true)
	tests.DBExec(dbClient, tests.GroupsTableV1, t, true)
	tests.DBExec(dbClient, tests.UserMembershipsTableV1, t, true)
}

func usersDBDestroy(dbClient *sqlx.DB, t *testing.T) {
	tests.DBExec(dbClient, tests.UserMembershipsDropTableV1, t, false)
	tests.DBExec(dbClient, tests.GroupsDropTableV1, t, false)
	tests.DBExec(dbClient, tests.UsersDropTableV1, t, false)
}

func TestGetUsers(t *testing.T) {
	if testing.Short() {
		t.Skip("skipping postgresql test in short mode")
	}
	db := tests.DBClient(t)
	defer usersDBDestroy(db, t)
	usersDBInit(db, t)

	usersR := users.NewPostgresRepository(db)
	users.ReplaceGlobals(usersR)

	user1 := security.UserWithPassword{
		User: security.User{
			Login: "admin",
			Role:  1,
		},
		Password: "pass1",
	}
	user2 := security.UserWithPassword{
		User: security.User{
			Login: "test",
			Role:  1,
		},
		Password: "pass2",
	}
	user1.ID, _ = usersR.Create(user1)
	user2.ID, _ = usersR.Create(user2)

	req, err := http.NewRequest("GET", "/users", nil)
	if err != nil {
		t.Fatal(err)
	}
	rr := httptest.NewRecorder()
	r := chi.NewRouter()
	r.Get("/users", GetUsers)
	r.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}

	mapUsers := []security.User{user1.User, user2.User}
	usersData, _ := json.Marshal(mapUsers)
	expected := string(usersData) + "\n"

	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
	}

}

func TestGetUser(t *testing.T) {
	if testing.Short() {
		t.Skip("skipping postgresql test in short mode")
	}
	db := tests.DBClient(t)
	defer usersDBDestroy(db, t)
	usersDBInit(db, t)

	users.ReplaceGlobals(users.NewPostgresRepository(db))
	groups.ReplaceGlobals(groups.NewPostgresRepository(db))

	user := security.UserWithPassword{
		User: security.User{
			Login: "admin",
			Role:  1,
		},
		Password: "pass1",
	}
	user.ID, _ = users.R().Create(user)
	groupID, _ := groups.R().Create(groups.Group{Name: "mygroup"})
	err := groups.R().CreateMembership(groups.Membership{UserID: user.ID, GroupID: groupID, Role: 1})
	if err != nil {
		t.Error(err)
		t.FailNow()
	}

	req, err := http.NewRequest("GET", "/users/"+strconv.FormatInt(user.ID, 10), nil)
	if err != nil {
		t.Fatal(err)
	}
	rr := httptest.NewRecorder()
	r := chi.NewRouter()
	r.Get("/users/{id}", GetUser)
	r.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}

	userData, _ := json.Marshal(groups.UserWithGroups{
		User:   user.User,
		Groups: []groups.GroupOfUser{{ID: groupID, Name: "mygroup", UserRole: 1}},
	})
	expected := string(userData) + "\n"
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
	}
}

func TestPostUser(t *testing.T) {
	if testing.Short() {
		t.Skip("skipping postgresql test in short mode")
	}
	db := tests.DBClient(t)
	defer usersDBDestroy(db, t)
	usersDBInit(db, t)

	usersR := users.NewPostgresRepository(db)
	users.ReplaceGlobals(usersR)

	user := security.UserWithPassword{
		User: security.User{
			Login:    "admin",
			Role:     1,
			LastName: "admin",
		},
		Password: "password",
	}
	userData, _ := json.Marshal(user)

	req, err := http.NewRequest("POST", "/users", bytes.NewBuffer(userData))
	if err != nil {
		t.Fatal(err)
	}
	rr := httptest.NewRecorder()
	r := chi.NewRouter()
	r.Post("/users", PostUser)
	r.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}

	userGet, found, err := users.R().Get(1)
	if err != nil {
		t.Errorf("unexpected error: " + err.Error())
		t.FailNow()
	}
	if !found {
		t.Error("user not found")
		t.FailNow()
	}
	if userGet.Login != user.Login || userGet.Role != user.Role {
		t.Errorf("The user was not inserted correctly")
	}
}

func TestPutUser(t *testing.T) {
	if testing.Short() {
		t.Skip("skipping postgresql test in short mode")
	}
	db := tests.DBClient(t)
	defer usersDBDestroy(db, t)
	usersDBInit(db, t)

	usersR := users.NewPostgresRepository(db)
	users.ReplaceGlobals(usersR)

	user := security.UserWithPassword{
		User: security.User{
			Login:    "admin",
			Role:     1,
			LastName: "admin",
		},
		Password: "pass1",
	}
	user.ID, _ = usersR.Create(user)

	user.Login = "newLogin"
	user.Role = 1

	userData, _ := json.Marshal(user.User)
	req, err := http.NewRequest("PUT", "/users/"+strconv.FormatInt(user.ID, 10), bytes.NewBuffer(userData))
	if err != nil {
		t.Fatal(err)
	}
	rr := httptest.NewRecorder()
	r := chi.NewRouter()
	r.Put("/users/{id}", PutUser)
	r.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}

	userGet, found, err := users.R().Get(1)
	if err != nil {
		t.Errorf("unexpected error: " + err.Error())
		t.FailNow()
	}
	if !found {
		t.Error("user not found")
		t.FailNow()
	}
	if userGet.Login != user.Login || userGet.Role != user.Role {
		t.Errorf("The user was not updated correctly")
	}
}

func TestDeleteUser(t *testing.T) {
	if testing.Short() {
		t.Skip("skipping postgresql test in short mode")
	}
	db := tests.DBClient(t)
	defer usersDBDestroy(db, t)
	usersDBInit(db, t)

	usersR := users.NewPostgresRepository(db)
	users.ReplaceGlobals(usersR)

	user := security.UserWithPassword{
		User: security.User{
			Login: "admin",
			Role:  1,
		},
		Password: "pass1",
	}
	user.ID, _ = usersR.Create(user)

	req, err := http.NewRequest("DELETE", "/users/"+strconv.FormatInt(user.ID, 10), nil)
	if err != nil {
		t.Fatal(err)
	}
	rr := httptest.NewRecorder()
	r := chi.NewRouter()
	r.Delete("/users/{id}", DeleteUser)
	r.ServeHTTP(rr, req)

	_, found, err := usersR.Get(user.ID)
	if err != nil {
		t.Error(err)
		t.FailNow()
	}
	if found {
		t.Error("User found after deletion")
	}
}
