package situation

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/myrteametrics/myrtea-engine-api/v5/internals/models"
	"github.com/myrteametrics/myrtea-sdk/v5/postgres"
	"go.uber.org/zap"
)

// HistoryRecord represents a single and unique situation history entry
type HistoryRecord struct {
	ID                       int64
	TS                       time.Time
	TemplateInstanceID       int64
	FactsIDS                 map[int64]*time.Time
	Parameters               map[string]string
	EvaluatedExpressionFacts map[string]interface{}
}

// OverrideParameters overrides the parameters of the History Record
func (hr HistoryRecord) OverrideParameters(p map[string]string) {
	for key, value := range p {
		hr.Parameters[key] = value
	}
}

// Persist persists a situation history record in postgresql
func Persist(record HistoryRecord, evaluated bool) error {
	jsonIDs, err := json.Marshal(record.FactsIDS)
	if err != nil {
		return err
	}
	jsonParams, err := json.Marshal(record.Parameters)
	if err != nil {
		return err
	}
	jsonEvaluatedExpressionFacts, err := json.Marshal(record.EvaluatedExpressionFacts)
	if err != nil {
		return err
	}

	existingRecord, err := GetFromHistory(record.ID, record.TS, record.TemplateInstanceID, false)
	if err != nil {
		return err
	}
	if existingRecord == nil {
		query := `INSERT INTO situation_history_v1 (id, ts, situation_instance_id, facts_ids, expression_facts, parameters, metadatas, evaluated) 
			VALUES (:situationid, :ts, :situation_instance_id, :factids, :expression_facts, :parameters, :metadatas, :evaluated)`
		params := map[string]interface{}{
			"situationid":           record.ID,
			"ts":                    record.TS.UTC(),
			"situation_instance_id": record.TemplateInstanceID,
			"factids":               string(jsonIDs),
			"parameters":            string(jsonParams),
			"expression_facts":      string(jsonEvaluatedExpressionFacts),
			"metadatas":             nil,
			"evaluated":             evaluated,
		}
		res, err := postgres.DB().NamedExec(query, params)
		if err != nil {
			return err
		}
		i, err := res.RowsAffected()
		if err != nil {
			return err
		}
		if i != 1 {
			return errors.New("no row inserted (or multiple row inserted) instead of 1 row")
		}
	} else {
		query := `UPDATE situation_history_v1 SET  
			facts_ids = :factids,
			expression_facts = :expression_facts,
			parameters = :parameters,
			metadatas = :metadatas,
			evaluated = :evaluated
			WHERE id = :situationid AND ts = :ts AND situation_instance_id = :situation_instance_id`
		params := map[string]interface{}{
			"situationid":           record.ID,
			"ts":                    record.TS.UTC(),
			"situation_instance_id": record.TemplateInstanceID,
			"factids":               string(jsonIDs),
			"parameters":            string(jsonParams),
			"expression_facts":      string(jsonEvaluatedExpressionFacts),
			"metadatas":             nil,
			"evaluated":             evaluated,
		}
		res, err := postgres.DB().NamedExec(query, params)
		if err != nil {
			return err
		}
		i, err := res.RowsAffected()
		if err != nil {
			return err
		}
		if i != 1 {
			return errors.New("no row inserted (or multiple row inserted) instead of 1 row")
		}
	}
	return nil
}

//SetAsEvaluated sets as evaluated the situation instance history
func SetAsEvaluated(situationID int64, t time.Time, templateInstanceID int64) error {

	query := `UPDATE situation_history_v1 SET evaluated = true WHERE id = :situationid AND ts = :ts AND situation_instance_id = :situation_instance_id`
	params := map[string]interface{}{
		"situationid":           situationID,
		"ts":                    t.UTC(),
		"situation_instance_id": templateInstanceID,
	}
	res, err := postgres.DB().NamedExec(query, params)
	if err != nil {
		return err
	}
	i, err := res.RowsAffected()
	if err != nil {
		return err
	}
	if i != 1 {
		return errors.New("no row inserted (or multiple row inserted) instead of 1 row")
	}
	return nil
}

// UpdateExpressionFacts update the expression facts result on a situation history record
func UpdateExpressionFacts(record HistoryRecord) error {
	jsonEvaluatedExpressionFacts, err := json.Marshal(record.EvaluatedExpressionFacts)
	if err != nil {
		return err
	}

	query := `UPDATE situation_history_v1 SET expression_facts = :expression_facts WHERE id = :situationid AND situation_instance_id = :situation_instance_id AND ts = :ts`
	params := map[string]interface{}{
		"expression_facts":      string(jsonEvaluatedExpressionFacts),
		"situationid":           record.ID,
		"situation_instance_id": record.TemplateInstanceID,
		"ts":                    record.TS.UTC(),
	}
	res, err := postgres.DB().NamedExec(query, params)
	if err != nil {
		return err
	}
	i, err := res.RowsAffected()
	if err != nil {
		return err
	}
	if i != 1 {
		return errors.New("no row inserted (or multiple row inserted) instead of 1 row")
	}
	return nil
}

// GetFromHistory returns a single situation entry from postgresql
// It can be based on an exact timestamp, or return the closest result
func GetFromHistory(situationID int64, t time.Time, templateInstanceID int64, closest bool) (*HistoryRecord, error) {
	if postgres.DB() == nil {
		return nil, errors.New("db Client is not initialized")
	}

	var query string
	if !closest {
		query = "SELECT ts, facts_ids, parameters, expression_facts FROM situation_history_v1 WHERE id = :situationid AND situation_instance_id = :situation_instance_id AND ts = :ts"
	} else {
		query = "SELECT ts, facts_ids, parameters, expression_facts FROM situation_history_v1 WHERE id = :situationid AND situation_instance_id = :situation_instance_id AND ts <= :ts ORDER BY ts DESC LIMIT 1"
	}
	params := map[string]interface{}{
		"situationid":           situationID,
		"situation_instance_id": templateInstanceID,
		"ts":                    t.UTC(),
	}
	rows, err := postgres.DB().NamedQuery(query, params)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	if rows.Err() != nil {
		return nil, rows.Err()
	}
	if rows.Next() {
		var rawFactIDs []byte
		var rawParams []byte
		var rawExpressionFacts []byte
		var ts time.Time
		err = rows.Scan(&ts, &rawFactIDs, &rawParams, &rawExpressionFacts)
		if err != nil {
			return nil, err
		}

		var factIDs map[int64]*time.Time
		err = json.Unmarshal(rawFactIDs, &factIDs)
		if err != nil {
			return nil, err
		}

		var parameters map[string]string
		err = json.Unmarshal(rawParams, &parameters)
		if err != nil {
			return nil, err
		}

		var evaluatedExpressionFacts map[string]interface{}
		err = json.Unmarshal(rawExpressionFacts, &evaluatedExpressionFacts)
		if err != nil {
			return nil, err
		}

		record := HistoryRecord{
			ID:                       situationID,
			TS:                       ts,
			FactsIDS:                 factIDs,
			Parameters:               parameters,
			TemplateInstanceID:       templateInstanceID,
			EvaluatedExpressionFacts: evaluatedExpressionFacts,
		}
		return &record, nil
	}
	return nil, nil
}

// UpdateHistoryMetadata updates a situation entry in postgresql and update its metadatas
func UpdateHistoryMetadata(situationID int64, t time.Time, templateInstanceID int64, metaDatas []models.MetaData) error {
	if len(metaDatas) == 0 {
		zap.L().Warn("Trying to update new empty metadatas", zap.Int64("situationID", situationID), zap.Int64("templateInstanceID", templateInstanceID))
		return nil
	}

	currentMetaDatas, err := GetHistoryMetadata(situationID, t, templateInstanceID)
	if err != nil {
		zap.L().Error("GetHistoryMetadata", zap.Int64("situationID", situationID), zap.Int64("templateInstanceID", templateInstanceID), zap.Error(err))
		return err
	}

	newMetaDatas := make([]models.MetaData, 0)
	newMetaDatas = append(newMetaDatas, metaDatas...)

	for _, metaData := range currentMetaDatas {
		if metaData.RuleID != metaDatas[0].RuleID {
			newMetaDatas = append(newMetaDatas, metaData)
		}
	}

	jsonMetaData, err := json.Marshal(newMetaDatas)
	if err != nil {
		return err
	}

	query := `UPDATE situation_history_v1 SET metadatas = :metadatas WHERE id = :situationid AND ts = :ts AND situation_instance_id = :situation_instance_id`
	params := map[string]interface{}{
		"situationid":           situationID,
		"ts":                    t.UTC(),
		"situation_instance_id": templateInstanceID,
		"metadatas":             string(jsonMetaData),
	}
	res, err := postgres.DB().NamedExec(query, params)
	if err != nil {
		return err
	}
	i, err := res.RowsAffected()
	if err != nil {
		return err
	}
	if i != 1 {
		return errors.New("no row inserted (or multiple row inserted) instead of 1 row")
	}
	return nil
}

// GetHistoryMetadata returns metadatas for a specific history entry (based on situation ID and timestamp)
func GetHistoryMetadata(situationID int64, t time.Time, templateInstanceID int64) ([]models.MetaData, error) {
	query := `SELECT metadatas FROM situation_history_v1 WHERE id = :situationid AND ts = :ts  AND situation_instance_id = :situation_instance_id`
	rows, err := postgres.DB().NamedQuery(query, map[string]interface{}{
		"situationid":           situationID,
		"ts":                    t.UTC(),
		"situation_instance_id": templateInstanceID,
	})

	if err != nil {
		return nil, errors.New("couldn't retrieve the Situation History with ID: " + fmt.Sprint(situationID) + " and TS: " + fmt.Sprint(t.UTC()) + " : " + err.Error())
	}
	defer rows.Close()

	metaDatas := []models.MetaData{}
	var data *string
	if rows.Next() {
		err := rows.Scan(&data)
		if err != nil {
			return nil, errors.New("couldn't scan the retrieved data: " + err.Error())
		}
		if data != nil {
			err = json.Unmarshal([]byte(*data), &metaDatas)
			if err != nil {
				return nil, errors.New("malformed metaDatas, Situation ID: " + fmt.Sprint(situationID) + " and TS: " + fmt.Sprint(t.UTC()) + " : " + err.Error())
			}
		}
		return metaDatas, nil
	}
	return nil, errors.New("situation History not found for ID: " + fmt.Sprint(situationID) + ", TS: " + fmt.Sprint(t.UTC()) + " and templateInstanceID: " + fmt.Sprint(templateInstanceID))
}

// GetLastHistoryMetadata returns the metadatas of the last evaluation of a situation
func GetLastHistoryMetadata(situationID int64, templateInstanceID int64) ([]models.MetaData, error) {
	query := `SELECT metadatas FROM situation_history_v1 WHERE id = :situationid AND situation_instance_id = :situation_instance_id ORDER BY ts DESC LIMIT 1`
	rows, err := postgres.DB().NamedQuery(query, map[string]interface{}{
		"situationid":           situationID,
		"situation_instance_id": templateInstanceID,
	})

	if err != nil {
		return nil, errors.New("couldn't retrieve the Situation History with ID: " + fmt.Sprint(situationID) + " and templateInstanceID: " + fmt.Sprint(templateInstanceID) + " - " + err.Error())
	}
	defer rows.Close()

	metaDatas := []models.MetaData{}
	var data *string
	if rows.Next() {
		err := rows.Scan(&data)
		if err != nil {
			return nil, errors.New("couldn't scan the retrieved data: " + err.Error())
		}
		if data != nil {
			err = json.Unmarshal([]byte(*data), &metaDatas)
			if err != nil {
				return nil, errors.New("malformed metaDatas, Situation ID: " + fmt.Sprint(situationID) + " and templateInstanceID: " + fmt.Sprint(templateInstanceID) + " - " + err.Error())
			}
		}
		return metaDatas, nil
	}
	return nil, errors.New("situation History not found for ID: " + fmt.Sprint(situationID) + " and templateInstanceID: " + fmt.Sprint(templateInstanceID))
}
