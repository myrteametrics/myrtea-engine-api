package router

import (
	"fmt"
	"net/http"
	"net/http/httputil"
	"net/url"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/go-chi/chi"
	chimiddleware "github.com/go-chi/chi/middleware"
	"github.com/go-chi/cors"
	"github.com/go-chi/jwtauth"
	_ "github.com/myrteametrics/myrtea-engine-api/v4/docs" // docs is generated by Swag CL
	"github.com/myrteametrics/myrtea-engine-api/v4/internals/handlers"
	plugin "github.com/myrteametrics/myrtea-engine-api/v4/plugins"
	"github.com/myrteametrics/myrtea-sdk/v4/postgres"
	"github.com/myrteametrics/myrtea-sdk/v4/security"
	httpSwagger "github.com/swaggo/http-swagger"
	"go.uber.org/zap"
)

// NewChiRouter initialize a chi.Mux router with all required default middleware (logger, security, recovery, etc.)
func NewChiRouter(apiEnableSecurity bool, apiEnableCORS bool, apiEnableGatewayMode bool, logLevel zap.AtomicLevel,
	plugins []plugin.MyrteaPlugin) *chi.Mux {

	r := chi.NewRouter()

	// Specific security middleware initialization
	signingKey := []byte(security.RandString(128))
	securityMiddleware := security.NewMiddlewareJWT(signingKey, security.NewDatabaseAuth(postgres.DB()))

	// Global middleware stack
	// TODO: Add CORS middleware
	if apiEnableCORS {
		cors := cors.New(cors.Options{
			AllowedOrigins:   []string{"*"},
			AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
			AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
			ExposedHeaders:   []string{"Link"},
			AllowCredentials: true,
			MaxAge:           300, // Maximum value not ignored by any of major browsers
		})
		r.Use(cors.Handler)
	}

	r.Use(chimiddleware.SetHeader("Strict-Transport-Security", "max-age=63072000; includeSubDomains"))
	r.Use(chimiddleware.RequestID)
	r.Use(chimiddleware.RealIP)
	r.Use(chimiddleware.StripSlashes)
	r.Use(chimiddleware.RedirectSlashes)
	r.Use(CustomLogger)
	r.Use(chimiddleware.Recoverer)
	r.Use(chimiddleware.Timeout(60 * time.Second))

	r.Route("/api/v4", func(r chi.Router) {

		// Public routes
		r.Group(func(rg chi.Router) {
			rg.Get("/isalive", handlers.IsAlive)
			rg.Get("/swagger/*", httpSwagger.WrapHandler)

			rg.Post("/login", securityMiddleware.GetToken())
		})

		// Protected routes
		r.Group(func(rg chi.Router) {
			if apiEnableSecurity {
				if apiEnableGatewayMode {
					// Warning: No signature verification will be done on JWT.
					// JWT MUST have been verified before by the API Gateway
					rg.Use(UnverifiedAuthenticator)
				} else {
					rg.Use(jwtauth.Verifier(jwtauth.New(jwt.SigningMethodHS256.Name, signingKey, nil)))
					rg.Use(CustomAuthenticator)
				}
				rg.Use(ContextMiddleware)
			}
			rg.Use(chimiddleware.SetHeader("Content-Type", "application/json"))

			rg.HandleFunc("/log_level", logLevel.ServeHTTP)
			rg.Mount("/engine", engineRouter())
			for _, plugin := range plugins {
				rg.Mount(fmt.Sprintf("%s", plugin.HandlerPrefix()), plugin.Handler())
				rg.HandleFunc(fmt.Sprintf("/plugin%s", plugin.HandlerPrefix()), ReverseProxy(plugin))
			}
		})

		// Admin Protection routes
		r.Group(func(rg chi.Router) {
			if apiEnableSecurity {
				if apiEnableGatewayMode {
					// Warning: No signature verification will be done on JWT.
					// JWT MUST have been verified before by the API Gateway
					rg.Use(UnverifiedAuthenticator)
				} else {
					rg.Use(jwtauth.Verifier(jwtauth.New(jwt.SigningMethodHS256.Name, signingKey, nil)))
					rg.Use(CustomAuthenticator)
				}
				rg.Use(security.AdminAuthentificator)
				rg.Use(ContextMiddleware)
			}
			rg.Use(chimiddleware.SetHeader("Content-Type", "application/json"))

			rg.Mount("/admin", adminRouter())
		})

		// System intra services Protection routes
		r.Group(func(rg chi.Router) {
			//TODO: change to be intra APIs
			if apiEnableSecurity {
				rg.Use(jwtauth.Verifier(jwtauth.New(jwt.SigningMethodHS256.Name, signingKey, nil)))
				rg.Use(CustomAuthenticator)
				rg.Use(ContextMiddleware)
			}
			rg.Use(chimiddleware.SetHeader("Content-Type", "application/json"))

			rg.Mount("/service", serviceRouter())
		})
	})

	return r
}

// ReverseProxy act as a reverse proxy for any plugin http handlers
func ReverseProxy(plugin plugin.MyrteaPlugin) http.HandlerFunc {
	URL, _ := url.Parse("http://localhost:9081")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		zap.L().Info("url", zap.Any("url", r.URL))
		zap.L().Info("call reverse proxy")
		httputil.NewSingleHostReverseProxy(URL).ServeHTTP(w, r)
	})
}
