package router

import (
	"net/http"

	"github.com/go-chi/chi/v5"
	_ "github.com/myrteametrics/myrtea-engine-api/v5/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/myrteametrics/myrtea-engine-api/v5/internal/handler"
)

func adminRouter(services Services) http.Handler {
	r := chi.NewRouter()

	// security
	r.Get("/security/users", handler.GetUsers)
	r.Get("/security/users/{id}", handler.GetUser)
	r.Post("/security/users/validate", handler.ValidateUser)
	r.Post("/security/users", handler.PostUser)
	r.Put("/security/users/{id}", handler.PutUser)
	r.Delete("/security/users/{id}", handler.DeleteUser)
	// r.Get("/security/users/{id}/roles", handler.GetUserRoles)
	r.Put("/security/users/{id}/roles", handler.SetUserRoles)

	r.Get("/security/roles", handler.GetRoles)
	r.Get("/security/roles/{id}", handler.GetRole)
	r.Post("/security/roles/validate", handler.ValidateRole)
	r.Post("/security/roles", handler.PostRole)
	r.Put("/security/roles/{id}", handler.PutRole)
	r.Delete("/security/roles/{id}", handler.DeleteRole)
	r.Get("/security/roles/{id}/permissions", handler.GetRolePermissions)
	r.Put("/security/roles/{id}/permissions", handler.SetRolePermissions)

	r.Get("/security/permissions", handler.GetPermissions)
	r.Get("/security/permissions/{id}", handler.GetPermission)
	r.Post("/security/permissions/validate", handler.ValidatePermission)
	r.Post("/security/permissions", handler.PostPermission)
	r.Put("/security/permissions/{id}", handler.PutPermission)
	r.Delete("/security/permissions/{id}", handler.DeletePermission)

	r.Get("/security/apikey", services.ApiKeyHandler.GetAPIKeys)
	r.Get("/security/apikey/{id}", services.ApiKeyHandler.GetAPIKey)
	r.Post("/security/apikey", services.ApiKeyHandler.CreateAPIKey)
	r.Put("/security/apikey/{id}", services.ApiKeyHandler.PutAPIKey)
	r.Delete("/security/apikey/{id}", services.ApiKeyHandler.DeleteAPIKey)
	r.Post("/security/apikey/{id}/deactivate", services.ApiKeyHandler.DeactivateAPIKey)
	r.Get("/security/roles/{roleId}/apikey", services.ApiKeyHandler.GetAPIKeysForRole)

	r.Get("/engine/issues_all", handler.GetIssues)

	return r
}

func engineRouter(services Services) http.Handler {
	r := chi.NewRouter()

	r.Get("/security/myself", handler.GetUserSelf)

	r.Get("/models", handler.GetModels)
	r.Get("/models/{id}", handler.GetModel)
	r.Post("/models", handler.PostModel)
	r.Post("/models/validate", handler.ValidateModel)
	r.Put("/models/{id}", handler.PutModel)
	r.Delete("/models/{id}", handler.DeleteModel)
	r.Get("/models/updateTemplate/{id}", handler.UpdateModelTemplate)

	// r.Get("/crons", handler.GetAllCron)
	// r.Post("/crons/start", handler.StartAllCron)
	// r.Post("/crons/stop", handler.StopAllCron)
	// r.Get("/cron", handler.GetCron)
	// r.Post("/cron/{instance}/{logicalIndex}/start", handler.StartCron)
	// r.Post("/cron/{instance}/{logicalIndex}/stop", handler.StopCron)

	r.Get("/facts", handler.GetFacts)
	r.Get("/facts/{id}", handler.GetFact)
	r.Post("/facts/validate", handler.ValidateFact)
	r.Post("/facts", handler.PostFact)
	r.Put("/facts/{id}", handler.PutFact)
	r.Delete("/facts/{id}", handler.DeleteFact)
	r.Get("/facts/{id}/execute", handler.ExecuteFact) // ?time=2019-05-10T12:00:00.000+02:00 debug=<boolean>
	r.Post("/facts/execute", handler.ExecuteFactOrGetHits)
	r.Get("/facts/{id}/hits", handler.GetFactHits) // ?time=2019-05-10T12:00:00.000 debug=<boolean>
	r.Get("/facts/{id}/es", handler.FactToESQuery)
	r.Post("/facts/streamedexport", handler.ExportFactStreamed)

	r.Get("/situations", handler.GetSituations)

	r.Get("/situations/overview", handler.GetSituationOverview)

	r.Get("/situations/{id}", handler.GetSituation)
	r.Post("/situations/validate", handler.ValidateSituation)
	r.Post("/situations", handler.PostSituation)
	r.Put("/situations/{id}", handler.PutSituation)
	r.Delete("/situations/{id}", handler.DeleteSituation)
	r.Get("/situations/{id}/facts", handler.GetSituationFacts)
	r.Get("/situations/{id}/rules", handler.GetSituationRules)
	r.Put("/situations/{id}/rules", handler.SetSituationRules)
	r.Get("/situations/{id}/evaluation", handler.GetSituationEvaluation)
	r.Get("/situations/{id}/instances", handler.GetSituationTemplateInstances)
	r.Post("/situations/{id}/instances", handler.PostSituationTemplateInstance)
	r.Put("/situations/{id}/instances/{instanceid}", handler.PutSituationTemplateInstance)
	r.Put("/situations/{id}/instances", handler.PutSituationTemplateInstances)
	r.Delete("/situations/{id}/instances/{instanceid}", handler.DeleteSituationTemplateInstance)
	r.Post("/situations/{id}/instances/validate", handler.ValidateSituationTemplateInstance)

	r.Get("/externalconfigs", handler.GetExternalConfigs)
	r.Get("/externalconfigs/{id}", handler.GetExternalConfig)
	r.Get("/externalconfigs/{id}/alloldversions", handler.GetAllOldVersions)
	r.Get("/externalconfigs/name/{name}", handler.GetExternalConfigByName)
	r.Post("/externalconfigs", handler.PostExternalConfig)
	r.Put("/externalconfigs/{id}", handler.PutExternalConfig)
	r.Delete("/externalconfigs/{id}", handler.DeleteExternalConfig)

	r.Get("/connectorconfigs", handler.GetConnectorConfigs)
	r.Get("/connectorconfigs/{id}", handler.GetConnectorConfig)
	r.Post("/connectorconfigs", handler.PostConnectorConfig)
	r.Put("/connectorconfigs/{id}", handler.PutConnectorConfig)
	r.Delete("/connectorconfigs/{id}", handler.DeleteConnectorConfig)

	r.Get("/esconfigs", handler.GetElasticSearchConfigs)
	r.Get("/esconfigs/{id}", handler.GetElasticSearchConfig)
	r.Get("/esconfigs/name/{name}", handler.GetElasticSearchConfigByName)
	r.Get("/esconfigs/default", handler.GetDefaultElasticSearchConfig)
	r.Post("/esconfigs", handler.PostElasticSearchConfig)
	r.Put("/esconfigs/{id}", handler.PutElasticSearchConfig)
	r.Delete("/esconfigs/{id}", handler.DeleteElasticSearchConfig)

	r.Get("/rules", handler.GetRules)
	r.Get("/rules/{id}", handler.GetRule)
	r.Get("/rules/{id}/versions/{versionId}", handler.GetRuleByVersion)
	r.Post("/rules/validate", handler.ValidateRule)
	r.Post("/rules", handler.PostRule)
	r.Put("/rules/{id}", handler.PutRule)
	r.Delete("/rules/{id}", handler.DeleteRule)
	r.Get("/rules/{id}/situations", handler.GetRuleSituations)
	r.Post("/rules/{id}/situations", handler.PostRuleSituations)

	r.Get("/issues", handler.GetIssuesByStatesByPage)
	r.Get("/issues/{id}", handler.GetIssue)
	r.Get("/issues/{id}/history", handler.GetIssueHistory)
	r.Get("/issues/{id}/facts_history", handler.GetIssueFactsHistory)
	r.Post("/issues", handler.PostIssue)
	r.Get("/issues/{id}/recommendation", handler.GetIssueFeedbackTree)
	r.Post("/issues/{id}/feedback/{isFakeAlert}", handler.PostIssueCloseWithFeedback)
	r.Post("/issues/{id}/draft", handler.PostIssueDraft)
	r.Post("/issues/draft", handler.PostIssuesDraft)
	r.Post("/issues/{id}/close", handler.PostIssueCloseWithoutFeedback)
	r.Post("/issues/{id}/detection/feedback", handler.PostIssueDetectionFeedback)
	r.Put("/issues/{id}/comment", handler.UpdateIssueComment)

	r.Post("/scheduler/start", handler.StartScheduler)
	r.Post("/scheduler/trigger", handler.TriggerJobSchedule)
	r.Get("/scheduler/jobs", handler.GetJobSchedules)
	r.Get("/scheduler/jobs/{id}", handler.GetJobSchedule)
	r.Post("/scheduler/jobs/validate", handler.ValidateJobSchedule)
	r.Post("/scheduler/jobs", handler.PostJobSchedule)
	r.Put("/scheduler/jobs/{id}", handler.PutJobSchedule)
	r.Delete("/scheduler/jobs/{id}", handler.DeleteJobSchedule)

	r.Put("/notifications/{id}/read", handler.UpdateRead)

	r.HandleFunc("/notifications/ws", handler.NotificationsWSRegister)
	r.HandleFunc("/notifications/sse", handler.NotificationsSSERegister)
	r.Get("/notifications", handler.GetNotifications)
	r.Post("/notifications/trigger", handler.TriggerNotification)

	r.Get("/rootcauses", handler.GetRootCauses)
	r.Get("/rootcauses/{id}", handler.GetRootCause)
	r.Post("/rootcauses/validate", handler.ValidateRootCause)
	r.Post("/rootcauses", handler.PostRootCause)
	r.Put("/rootcauses/{id}", handler.PutRootCause)
	r.Delete("/rootcauses/{id}", handler.DeleteRootCause)

	r.Get("/actions", handler.GetActions)
	r.Get("/actions/{id}", handler.GetAction)
	r.Post("/actions/validate", handler.ValidateAction)
	r.Post("/actions", handler.PostAction)
	r.Put("/actions/{id}", handler.PutAction)
	r.Delete("/actions/{id}", handler.DeleteAction)

	// r.Post("/search", handler.Search)
	r.Get("/search/last", handler.SearchLast)
	r.Get("/search/last/byinterval", handler.SearchLastByInterval)
	r.Get("/search/last/bycustominterval", handler.SearchLastByCustomInterval)

	r.Post("/history/facts/today/result", handler.GetFactResultForTodayByCriteria)
	r.Post("/history/facts/date/result", handler.GetFactResultByDateCriteria)
	r.Post("/history/factexpr/today/result", handler.GetFactExprResultForTodayByCriteria)
	r.Post("/history/factexpr/date/result", handler.GetFactExprResultByDateCriteria)

	r.Get("/calendars", handler.GetCalendars)
	r.Get("/calendars/{id}", handler.GetCalendar)
	r.Get("/calendars/{id}/contains", handler.IsInCalendarPeriod) // ?time=2019-05-10T12:00:00.000
	r.Get("/calendars/resolved/{id}", handler.GetResolvedCalendar)
	r.Post("/calendars", handler.PostCalendar)
	r.Put("/calendars/{id}", handler.PutCalendar)
	r.Delete("/calendars/{id}", handler.DeleteCalendar)

	r.Get("/connector/{id}/executions/last", handler.GetLastConnectorExecutionDateTime)

	// exports
	r.Get("/exports", services.ExportHandler.GetExports)
	r.Get("/exports/{id}", services.ExportHandler.GetExport)
	r.Get("/exports/{id}/download", services.ExportHandler.DownloadExport)
	r.Delete("/exports/{id}", services.ExportHandler.DeleteExport)
	r.Post("/exports/fact", services.ExportHandler.ExportFact)
	r.Post("/exports/custom", services.ExportHandler.ExportCustom)

	r.Get("/variablesconfig", handler.GetVariablesConfig)
	r.Get("/variablesconfig/scope/{scope}", handler.GetVariablesConfigByScope)
	r.Get("/variablesconfig/{id}", handler.GetVariableConfig)
	r.Get("/variablesconfig/key/{key}", handler.GetVariableConfigByKey)
	r.Post("/variablesconfig", handler.PostVariableConfig)
	r.Put("/variablesconfig/{id}", handler.PutVariableConfig)
	r.Delete("/variablesconfig/{id}", handler.DeleteVariableConfig)

	r.Get("/services", services.ServiceHandler.GetServices)
	r.Get("/services/{id}/status", services.ServiceHandler.GetStatus)
	r.Post("/services/{id}/restart", services.ServiceHandler.Restart)
	r.Post("/services/{id}/reload/{component}", services.ServiceHandler.Reload)

	// Tags routes
	r.Route("/tags", func(r chi.Router) {
		r.Get("/", handler.GetTags)
		r.Get("/{id}", handler.GetTag)
		r.Post("/", handler.PostTag)
		r.Put("/{id}", handler.PutTag)
		r.Delete("/{id}", handler.DeleteTag)

		// Tags for situations
		r.Get("/situations", handler.GetAllSituationsTags)
		r.Get("/situations/{situationId}", handler.GetTagsBySituation)
		r.Get("/situations/{situationId}/instances", handler.GetSituationTemplateInstanceTags)
		r.Post("/{tagId}/situations/{situationId}", handler.AddTagToSituation)
		r.Delete("/{tagId}/situations/{situationId}", handler.RemoveTagFromSituation)

		// Tags for template situation instances
		r.Get("/situationinstances/{instanceId}", handler.GetTagsByTemplateInstance)
		r.Post("/{tagId}/situationinstances/{instanceId}", handler.AddTagToTemplateInstance)
		r.Delete("/{tagId}/situationinstances/{instanceId}", handler.RemoveTagFromTemplateInstance)
	})

	// Config History routes
	r.Route("/config-histories", func(r chi.Router) {
		r.Get("/", handler.GetConfigHistories)
		r.Get("/{id}", handler.GetConfigHistory)
		r.Post("/", handler.CreateConfigHistory)
		r.Delete("/{id}", handler.DeleteConfigHistory)
		r.Delete("/oldest", handler.DeleteOldestConfigHistory)
		r.Get("/type/{type}", handler.GetConfigHistoriesByType)
		r.Get("/user/{user}", handler.GetConfigHistoriesByUser)
		r.Post("/interval", handler.GetConfigHistoriesByInterval)
	})

	return r
}

func serviceRouter(services Services) http.Handler {
	r := chi.NewRouter()

	r.Post("/objects", handler.PostObjects)
	r.Post("/aggregates", services.ProcessorHandler.PostAggregates)

	r.Get("/externalconfigs", handler.GetExternalConfigs)
	r.Get("/externalconfigs/{id}", handler.GetExternalConfig)
	r.Get("/externalconfigs/name/{name}", handler.GetExternalConfigByName)

	return r
}
