package router

import (
	"fmt"
	"github.com/go-chi/chi/v5"
	chimiddleware "github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
	"github.com/go-chi/jwtauth/v5"
	_ "github.com/myrteametrics/myrtea-engine-api/v5/docs" // docs is generated by Swag CL
	"github.com/myrteametrics/myrtea-engine-api/v5/internal/handler"
	oidcAuth "github.com/myrteametrics/myrtea-engine-api/v5/internal/router/oidc"
	"github.com/myrteametrics/myrtea-engine-api/v5/pkg/plugins"
	httputil2 "github.com/myrteametrics/myrtea-engine-api/v5/pkg/utils/httputil"
	ttlcache "github.com/myrteametrics/myrtea-sdk/v5/cache"
	"github.com/myrteametrics/myrtea-sdk/v5/postgres"
	sdkrouter "github.com/myrteametrics/myrtea-sdk/v5/router"
	sdksecurity "github.com/myrteametrics/myrtea-sdk/v5/security"
	httpSwagger "github.com/swaggo/http-swagger"
	"go.uber.org/zap"
	"net/http"
	"net/http/httputil"
	"net/url"
	"time"
)

// Config wraps common configuration parameters
type Config struct {
	Production         bool
	Security           bool
	CORS               bool
	GatewayMode        bool
	VerboseError       bool
	AuthenticationMode string
	LogLevel           zap.AtomicLevel
}

// Services is a wrapper for service instances, it is passed through router functions
type Services struct {
	PluginCore       *plugin.Core
	ProcessorHandler *handler.ProcessorHandler
	ExportHandler    *handler.ExportHandler
	ServiceHandler   *handler.ServiceHandler
	ApiKeyHandler    *handler.ApikeyHandler
}

const (
	AuthModeBasic  = "BASIC"
	AuthModeOIDC   = "OIDC"
	AuthModeApiKey = "API_KEY"
)

const (
	HeaderKeyApiKey = "X-API-Key"
)

// Check clean up the configuration and logs comments if required
func (config *Config) Check() {
	if !config.Security {
		zap.L().Warn("API starting in unsecured mode, be sure to set HTTP_SERVER_API_ENABLE_SECURITY=true in production")
	}
	if config.VerboseError {
		zap.L().Warn("API starting in verbose error mode, be sure to set HTTP_SERVER_API_ENABLE_VERBOSE_MODE=false in production")
	}
	if config.GatewayMode {
		zap.L().Warn("Server router will be started using API Gateway mode. " +
			"Please ensure every request has been properly pre-verified by the auth-api")
		if !config.Security {
			zap.L().Warn("Gateway mode has no use if API security is not enabled (HTTP_SERVER_API_ENABLE_SECURITY=false)")
			config.GatewayMode = false
		}
	}
	if config.Security && config.GatewayMode && config.AuthenticationMode == "SAML" {
		zap.L().Warn("SAML Authentication mode is not compatible with HTTP_SERVER_API_ENABLE_GATEWAY_MODE=true")
		config.GatewayMode = false
	}
	if config.Security && config.GatewayMode && config.AuthenticationMode == "OIDC" {
		zap.L().Warn("OIDC Authentication mode is not compatible with HTTP_SERVER_API_ENABLE_GATEWAY_MODE=true")
		config.GatewayMode = false
	}
	if config.AuthenticationMode != "BASIC" && config.AuthenticationMode != "SAML" && config.AuthenticationMode != "OIDC" {
		zap.L().Warn("Authentication mode not supported. Back to default value 'BASIC'", zap.String("AuthenticationMode", config.AuthenticationMode))
		config.AuthenticationMode = "BASIC"
	}
}

// New returns a new fully configured instance of chi.Mux
// It instantiates all middlewares including the security ones, all routes and route groups
func New(config Config, services Services) *chi.Mux {
	config.Check()

	r := chi.NewRouter()
	// Global middleware stack
	// TODO: Add CORS middleware
	if config.CORS {
		corsHandler := cors.New(cors.Options{
			AllowedOrigins:   []string{"*"},
			AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
			AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token", HeaderKeyApiKey},
			ExposedHeaders:   []string{"Link", "Authenticate-To", "Content-Disposition"},
			AllowCredentials: true,
			MaxAge:           300, // Maximum value isn't ignored by any of the major browsers
		})
		r.Use(corsHandler.Handler)
	}

	r.Use(chimiddleware.SetHeader("Strict-Transport-Security", "max-age=63072000; includeSubDomains"))
	r.Use(chimiddleware.RequestID)
	r.Use(chimiddleware.RealIP)
	r.Use(chimiddleware.StripSlashes)
	r.Use(chimiddleware.RedirectSlashes)
	if config.Production {
		r.Use(sdkrouter.CustomZapLogger)
	} else {
		r.Use(sdkrouter.CustomLogger)
	}
	r.Use(chimiddleware.Recoverer)
	r.Use(chimiddleware.Timeout(60 * time.Second))

	signingKey := []byte(sdksecurity.RandString(128))
	jwtAuth := jwtauth.New("HS256", signingKey, nil)

	dynamicMiddleware := dynamicAuthMiddleware(config, jwtAuth, services.ApiKeyHandler.Cache)

	routes := func(r chi.Router) {
		// Public routes
		r.Group(func(rg chi.Router) {
			rg.Use(SwaggerUICustomizationMiddleware)
			rg.Get("/isalive", handler.IsAlive)
			rg.Get("/swagger/*", httpSwagger.WrapHandler)

			// Auth mode specific routes
			switch config.AuthenticationMode {
			case AuthModeBasic:
				securityMiddleware := sdksecurity.NewMiddlewareJWT(signingKey, sdksecurity.NewDatabaseAuth(postgres.DB()))
				rg.Post("/login", securityMiddleware.GetToken())
			case AuthModeOIDC:
				rg.Get("/auth/oidc", handler.HandleOIDCRedirect)
				rg.Get("/auth/oidc/callback", handler.HandleOIDCCallback)
			}

			// Public routes
			rg.Get("/authmode", handler.GetAuthenticationMode)
			rg.Get("/engine/issues/unprotected", handler.GetIssuesByStatesByPageUnProtected)
			rg.Get("/engine/security/apikey/validate", services.ApiKeyHandler.ValidateAPIKey)
			rg.Get("/engine/situations/{id}/instances/unprotected", handler.GetSituationTemplateInstancesUnprotected)
		})

		// Protected routes
		r.Group(func(rg chi.Router) {
			if config.Security {
				rg.Use(dynamicMiddleware)
			}
			rg.Use(chimiddleware.SetHeader("Content-Type", "application/json"))

			rg.HandleFunc("/log_level", config.LogLevel.ServeHTTP)
			rg.Mount("/engine", engineRouter(services))

			for _, plugin := range services.PluginCore.Plugins {
				rg.Mount(plugin.Plugin.HandlerPrefix(), plugin.Plugin.Handler())
				rg.HandleFunc(fmt.Sprintf("/plugin%s", plugin.Plugin.HandlerPrefix()), func(w http.ResponseWriter, r *http.Request) {
					httputil2.JSON(w, r, map[string]interface{}{"loaded": true})
				})
				rg.HandleFunc(fmt.Sprintf("/plugin%s/*", plugin.Plugin.HandlerPrefix()), ReverseProxy(plugin.Plugin))
			}
		})

		// Admin Protection routes
		r.Group(func(rg chi.Router) {
			if config.Security {
				// Same dynamic middleware as admin routes
				rg.Use(dynamicMiddleware)
			}
			rg.Use(chimiddleware.SetHeader("Content-Type", "application/json"))
			rg.Mount("/admin", adminRouter(services))
		})

		// System intra service Protection routes
		r.Group(func(rg chi.Router) {
			rg.Use(chimiddleware.SetHeader("Content-Type", "application/json"))
			rg.Mount("/service", serviceRouter(services))
		})
	}

	r.Route("/api/v4", routes)
	r.Route("/api/v5", routes)

	return r
}

// dynamicAuthMiddleware selects the appropriate authentication middleware
func dynamicAuthMiddleware(config Config, jwtAuth *jwtauth.JWTAuth, apiKeyCache *ttlcache.Cache) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			if apiKey := r.Header.Get(HeaderKeyApiKey); apiKey != "" {
				zap.L().Debug("Using API Key authentication")
				ContextMiddlewareApiKey(next, apiKeyCache).ServeHTTP(w, r)
				return
			}

			switch config.AuthenticationMode {
			case AuthModeBasic:
				if config.GatewayMode {
					sdkrouter.UnverifiedAuthenticator(next).ServeHTTP(w, r)
				} else {
					ctxMiddleware := ContextMiddleware(next)
					jwtVerifier := jwtauth.Verify(jwtAuth,
						jwtauth.TokenFromQuery,
						jwtauth.TokenFromHeader,
						jwtauth.TokenFromCookie)
					ctxMiddleware = CustomAuthenticator(ctxMiddleware)
					ctxMiddleware = jwtVerifier(ctxMiddleware)

					ctxMiddleware.ServeHTTP(w, r)
				}

			case AuthModeOIDC:
				if config.GatewayMode {
					zap.L().Warn("Request with OIDC mode in Gateway mode - falling back to BASIC")
					sdkrouter.UnverifiedAuthenticator(next).ServeHTTP(w, r)
				} else {
					ctxMiddleware := oidcAuth.ContextMiddleware(next)
					ctxMiddleware = oidcAuth.OIDCMiddleware(ctxMiddleware)
					ctxMiddleware.ServeHTTP(w, r)
				}

			default:
				zap.L().Error("Unsupported authentication mode",
					zap.String("AuthenticationMode", config.AuthenticationMode))
				http.Error(w, "Internal server error", http.StatusInternalServerError)
			}
		})
	}
}

// ReverseProxy act as a reverse proxy for any plugin http handlers
func ReverseProxy(plugin plugin.MyrteaPlugin) http.HandlerFunc {
	pluginUrl, _ := url.Parse(fmt.Sprintf("http://localhost:%d", plugin.ServicePort()))
	return func(w http.ResponseWriter, r *http.Request) {
		httputil.NewSingleHostReverseProxy(pluginUrl).ServeHTTP(w, r)
	}
}
