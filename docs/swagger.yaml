basePath: '{{.BasePath}}'
definitions:
  calendar.Calendar:
    properties:
      description:
        type: string
      enabled:
        type: boolean
      id:
        type: integer
      name:
        type: string
      periods:
        items:
          $ref: '#/definitions/calendar.Period'
        type: array
      timezone:
        type: string
      unionCalendarIDs:
        items:
          type: integer
        type: array
    type: object
  calendar.InPeriodContains:
    properties:
      contains:
        type: boolean
    type: object
  calendar.Period:
    properties:
      dateTimeIntervals:
        $ref: '#/definitions/calendar.dateTimeInterval'
        type: object
      daysOfMonth:
        $ref: '#/definitions/calendar.dayInterval'
        type: object
      daysOfWeek:
        $ref: '#/definitions/calendar.dayWeekInterval'
        type: object
      hoursOfDay:
        $ref: '#/definitions/calendar.hoursInterval'
        type: object
      included:
        type: boolean
      monthsOfYear:
        $ref: '#/definitions/calendar.monthInterval'
        type: object
    type: object
  calendar.dateTimeInterval:
    properties:
      from:
        type: string
      to:
        type: string
    type: object
  calendar.dayInterval:
    properties:
      from:
        type: integer
      to:
        type: integer
    type: object
  calendar.dayWeekInterval:
    properties:
      from:
        type: string
      to:
        type: string
    type: object
  calendar.hoursInterval:
    properties:
      fromHour:
        type: integer
      fromMinute:
        type: integer
      toHour:
        type: integer
      toMinute:
        type: integer
    type: object
  calendar.monthInterval:
    properties:
      from:
        type: string
      to:
        type: string
    type: object
  models.Action:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      rootCauseId:
        type: integer
    type: object
  models.ConnectorConfig:
    properties:
      connectorId:
        type: string
      current:
        type: object
      id:
        type: integer
      name:
        type: string
    type: object
  models.ExternalConfig:
    properties:
      data:
        type: object
      id:
        type: integer
      name:
        type: string
    type: object
  models.FrontAction:
    properties:
      custom:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      occurrence:
        type: integer
      selected:
        type: boolean
      usageRate:
        type: number
    type: object
  models.FrontRecommendation:
    properties:
      tree:
        items:
          $ref: '#/definitions/models.FrontRootCause'
        type: array
      uuid:
        type: string
    type: object
  models.FrontRootCause:
    properties:
      actions:
        items:
          $ref: '#/definitions/models.FrontAction'
        type: array
      clusteringScore:
        type: number
      custom:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      occurrence:
        type: integer
      selected:
        type: boolean
      usageRate:
        type: number
    type: object
  models.RootCause:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      ruleId:
        type: integer
      situationId:
        type: integer
    type: object
  notification.FrontNotification:
    properties:
      isRead:
        type: boolean
    type: object
  permissions.Permission:
    properties:
      action:
        type: string
      id:
        type: string
      resourceId:
        type: string
      resourceType:
        type: string
    type: object
  roles.Role:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  rule.Rule:
    properties:
      calendarId:
        type: integer
      description:
        type: string
      enabled:
        type: boolean
      name:
        type: string
    type: object
  scheduler.InternalJob:
    type: object
  scheduler.InternalSchedule:
    properties:
      cronexpr:
        example: 0 */15 * * *
        type: string
      id:
        type: integer
      job:
        $ref: '#/definitions/scheduler.InternalJob'
        type: object
      jobtype:
        enum:
        - fact
        - baseline
        type: string
      name:
        type: string
    type: object
  search.FactHistoryRecord:
    properties:
      baselines:
        type: object
      buckets:
        type: object
      dateTime:
        type: string
      docCount:
        type: object
      factId:
        type: integer
      factName:
        type: string
      value:
        type: object
    type: object
  search.QueryResult:
    items:
      properties:
        dateTime:
          type: string
        situations:
          items:
            $ref: '#/definitions/search.SituationHistoryRecord'
          type: array
      type: object
    type: array
  search.SituationHistoryCalendarRecord:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      timezone:
        type: string
    type: object
  search.SituationHistoryRecord:
    properties:
      calendar:
        $ref: '#/definitions/search.SituationHistoryCalendarRecord'
        type: object
      dateTime:
        type: string
      expressionFacts:
        type: object
      facts:
        items:
          $ref: '#/definitions/search.FactHistoryRecord'
        type: array
      metaDatas:
        type: object
      parameters:
        type: object
      situationId:
        type: integer
      situationInstanceId:
        type: integer
      situationInstanceName:
        type: string
      situationName:
        type: string
    type: object
  search.SituationHistoryRecords:
    properties:
      dateTime:
        type: string
      situations:
        items:
          $ref: '#/definitions/search.SituationHistoryRecord'
        type: array
    type: object
  situation.ExpressionFact:
    properties:
      expression:
        type: string
      name:
        type: string
    type: object
  situation.Situation:
    properties:
      calendarId:
        type: integer
      expressionFacts:
        items:
          $ref: '#/definitions/situation.ExpressionFact'
        type: array
      facts:
        items:
          type: integer
        type: array
      id:
        type: integer
      isObject:
        type: boolean
      isTemplate:
        type: boolean
      name:
        type: string
      parameters:
        type: object
    type: object
  situation.TemplateInstance:
    properties:
      calendarId:
        type: integer
      id:
        type: integer
      name:
        type: string
      parameters:
        type: object
      situationId:
        type: integer
    type: object
  users.User:
    properties:
      created:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      login:
        type: string
      phone:
        type: string
    type: object
host: '{{.Host}}'
info:
  contact:
    email: contact@myrteametrics.com
    name: Myrtea Metrics
    url: https://myrteametrics.ai/en/
  description: Myrtea Engine-API Swagger
  license: {}
  termsOfService: http://swagger.io/terms/
  title: '{{.Title}}'
  version: "1.0"
paths:
  /admin/engine/issues_all:
    get:
      description: Get all issues
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all issues
      tags:
      - Issues
  /admin/security/permissions:
    get:
      description: Gets a list of all user permissions.
      produces:
      - application/json
      responses:
        "200":
          description: list of permissions
          schema:
            items:
              $ref: '#/definitions/permissions.Permission'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all user permissions
      tags:
      - Permissions
    post:
      consumes:
      - application/json
      description: Add an user permission to the user permissions
      parameters:
      - description: permission (json)
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/permissions.Permission'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: permission
          schema:
            $ref: '#/definitions/permissions.Permission'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new permission
      tags:
      - Permissions
  /admin/security/permissions/{id}:
    delete:
      description: Deletes an user permission
      parameters:
      - description: permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: status OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete permission
      tags:
      - Permissions
    get:
      description: Gets an user permission with the specified id
      parameters:
      - description: permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: permission
          schema:
            $ref: '#/definitions/permissions.Permission'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get an user permission
      tags:
      - Permissions
    put:
      consumes:
      - application/json
      description: Updates the user permission information concerning the user permission
        with id
      parameters:
      - description: permission ID
        in: path
        name: id
        required: true
        type: string
      - description: permission (json)
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/permissions.Permission'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: permission
          schema:
            $ref: '#/definitions/permissions.Permission'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update permission
      tags:
      - Permissions
  /admin/security/permissions/validate:
    post:
      consumes:
      - application/json
      description: Validate a new permission definition
      parameters:
      - description: permission (json)
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/permissions.Permission'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: permission
          schema:
            $ref: '#/definitions/permissions.Permission'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Validate a new permission definition
      tags:
      - Permissions
  /admin/security/roles:
    get:
      description: Gets a list of all user roles.
      produces:
      - application/json
      responses:
        "200":
          description: list of roles
          schema:
            items:
              $ref: '#/definitions/roles.Role'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all user roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Add an user role to the user roles
      parameters:
      - description: role (json)
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/roles.Role'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: role
          schema:
            $ref: '#/definitions/roles.Role'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new role
      tags:
      - Roles
  /admin/security/roles/{id}:
    delete:
      description: Deletes an user role
      parameters:
      - description: role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: status OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete role
      tags:
      - Roles
    get:
      description: Gets an user role with the specified id
      parameters:
      - description: role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: role
          schema:
            $ref: '#/definitions/roles.Role'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get an user role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Updates the user role information concerning the user role with
        id
      parameters:
      - description: role ID
        in: path
        name: id
        required: true
        type: string
      - description: role (json)
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/roles.Role'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: role
          schema:
            $ref: '#/definitions/roles.Role'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update role
      tags:
      - Roles
  /admin/security/roles/{id}/permissions:
    get:
      description: Get all permissions associated with a specified role id
      parameters:
      - description: role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: permission
          schema:
            items:
              $ref: '#/definitions/permissions.Permission'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all permissions associated with a role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Set permissions on a role
      parameters:
      - description: role ID
        in: path
        name: id
        required: true
        type: string
      - description: List of permissions UUIDs
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/[]string'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: role
          schema:
            $ref: '#/definitions/roles.Role'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Set permissions on a role
      tags:
      - Roles
  /admin/security/roles/validate:
    post:
      consumes:
      - application/json
      description: Validate a new role definition
      parameters:
      - description: role (json)
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/roles.Role'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: role
          schema:
            $ref: '#/definitions/roles.Role'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Validate a new role definition
      tags:
      - Roles
  /admin/security/users:
    get:
      description: Gets a list of all user users.
      produces:
      - application/json
      responses:
        "200":
          description: list of users
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all user users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Add an user user to the user users
      parameters:
      - description: user (json)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.User'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: user
          schema:
            $ref: '#/definitions/users.User'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new user
      tags:
      - Users
  /admin/security/users/{id}:
    delete:
      description: Deletes an user user
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: status OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Gets an user user with the specified id
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user
          schema:
            $ref: '#/definitions/users.User'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get an user user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates the user user information concerning the user user with
        id
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: string
      - description: user (json)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.User'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: user
          schema:
            $ref: '#/definitions/users.User'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update user
      tags:
      - Users
  /admin/security/users/{id}/roles:
    put:
      consumes:
      - application/json
      description: Set roles on a user
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: string
      - description: List of roles UUIDs
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/[]string'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: user
          schema:
            $ref: '#/definitions/users.User'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Set roles on a user
      tags:
      - Users
  /admin/security/users/validate:
    post:
      consumes:
      - application/json
      description: Validate a new user definition
      parameters:
      - description: user (json)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.User'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: user
          schema:
            $ref: '#/definitions/users.User'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Validate a new user definition
      tags:
      - Users
  /assistant/message:
    post:
      consumes:
      - application/json
      description: Sends a message to the myrtea Assistant.
      parameters:
      - description: Timestamp
        in: query
        name: time
        required: true
        type: string
      - description: User sentence and context Tokens
        in: body
        name: sentence
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      - description: Enable log debugging
        in: query
        name: debug
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status Internal Server Error
      security:
      - Bearer: []
      summary: Sends a message to the myrtea Assistant.
      tags:
      - Assistant
  /coordinator/alias:
    post:
      consumes:
      - application/json
      description: returns an alias based on an instance, a document type and a depth
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      tags:
      - Alias
  /coordinator/cron:
    get:
      consumes:
      - application/json
      description: returns an overview of a single cron
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      tags:
      - Cron
  /coordinator/cron/start:
    post:
      consumes:
      - application/json
      description: starts a single cron
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      tags:
      - Cron
  /coordinator/cron/stop:
    post:
      consumes:
      - application/json
      description: stops a single cron
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      tags:
      - Cron
  /coordinator/crons:
    get:
      consumes:
      - application/json
      description: returns an overview of every defined crons
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      tags:
      - Cron
  /coordinator/crons/start:
    post:
      consumes:
      - application/json
      description: starts every defined crons
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      tags:
      - Cron
  /coordinator/crons/stop:
    post:
      consumes:
      - application/json
      description: stops every defined crons
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      tags:
      - Cron
  /engine/actions:
    get:
      description: Get all action definitions
      produces:
      - application/json
      responses:
        "200":
          description: list of all actions
          schema:
            items:
              $ref: '#/definitions/models.Action'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all action definitions
      tags:
      - Actions
    post:
      consumes:
      - application/json
      description: Create a new action definition
      parameters:
      - description: Action definition (json)
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/models.Action'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: action
          schema:
            $ref: '#/definitions/models.Action'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create a new action definition
      tags:
      - Actions
  /engine/actions/{id}:
    delete:
      description: Delete a action definition
      parameters:
      - description: Action ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Delete a action definition
      tags:
      - Actions
    get:
      description: Get a action definition
      parameters:
      - description: Action ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: action
          schema:
            $ref: '#/definitions/models.Action'
            type: object
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get a action definition
      tags:
      - Actions
    put:
      consumes:
      - application/json
      description: Create or remplace a action definition
      parameters:
      - description: Action ID
        in: path
        name: id
        required: true
        type: string
      - description: Action definition (json)
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/models.Action'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: action
          schema:
            $ref: '#/definitions/models.Action'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create or remplace a action definition
      tags:
      - Actions
  /engine/actions/validate:
    post:
      consumes:
      - application/json
      description: Validate a new action definition
      parameters:
      - description: Action definition (json)
        in: body
        name: action
        required: true
        schema:
          $ref: '#/definitions/models.Action'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: action
          schema:
            $ref: '#/definitions/models.Action'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Validate a new action definition
      tags:
      - Actions
  /engine/calendars:
    get:
      description: Get all calendars
      produces:
      - application/json
      responses:
        "200":
          description: list of calendars
          schema:
            items:
              $ref: '#/definitions/calendar.Calendar'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all calendars
      tags:
      - Calendars
    post:
      consumes:
      - application/json
      description: Creates a Calendar
      parameters:
      - description: Calendar (json)
        in: body
        name: calendar
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: calendar
          schema:
            $ref: '#/definitions/calendar.Calendar'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Creates a Calendar
      tags:
      - Calendars
  /engine/calendars/{id}:
    delete:
      description: Delete calendar
      parameters:
      - description: Calendar ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status Internal Server Error
      security:
      - Bearer: []
      summary: Delete calendar
      tags:
      - Calendars
    get:
      description: Get an calendar
      parameters:
      - description: Calendar ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: calendar
          schema:
            $ref: '#/definitions/calendar.Calendar'
            type: object
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get a Calendar
      tags:
      - Calendars
    put:
      consumes:
      - application/json
      description: Updates the calendar
      parameters:
      - description: Calendar ID
        in: path
        name: id
        required: true
        type: string
      - description: calendar (json)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: calendar
          schema:
            $ref: '#/definitions/calendar.Calendar'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update a calendar
      tags:
      - Calendars
  /engine/calendars/{id}/contains:
    get:
      description: Determines wether a timestamp is within a valid calendar period
      parameters:
      - description: Calendar ID
        in: path
        name: id
        required: true
        type: string
      - description: Timestamp to be found within a calendar period
        in: query
        name: time
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: InPeriodContains
          schema:
            $ref: '#/definitions/calendar.InPeriodContains'
            type: object
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Determines wether a timestamp is within a valid calendar period
      tags:
      - Calendars
  /engine/calendars/resolved/{id}:
    get:
      description: Get a resolved Calendar
      parameters:
      - description: Calendar ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: calendar
          schema:
            $ref: '#/definitions/calendar.Calendar'
            type: object
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get a resolved Calendar
      tags:
      - Calendars
  /engine/connector/{id}/executions/last:
    get:
      description: Gets the DateTime of the last connections readings.
      parameters:
      - description: Connector ID
        in: path
        name: id
        required: true
        type: string
      - description: true to ignore failed connector executions
        in: query
        name: successOnly
        type: string
      - description: maximum age of data (duration)
        in: query
        name: maxage
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get the DateTime of the last connections readings
      tags:
      - Admin
  /engine/connectorconfigs:
    get:
      description: Get all connectorConfig definitions
      produces:
      - application/json
      responses:
        "200":
          description: list of all connectorConfigs
          schema:
            items:
              $ref: '#/definitions/models.ConnectorConfig'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all connectorConfig definitions
      tags:
      - ConnectorConfigs
    post:
      consumes:
      - application/json
      description: Create a new connectorConfig definition
      parameters:
      - description: ConnectorConfig definition (json)
        in: body
        name: connectorConfig
        required: true
        schema:
          $ref: '#/definitions/models.ConnectorConfig'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: connectorConfig
          schema:
            $ref: '#/definitions/models.ConnectorConfig'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create a new connectorConfig definition
      tags:
      - ConnectorConfigs
  /engine/connectorconfigs/{id}:
    get:
      description: Get an connectorConfig definition
      parameters:
      - description: ConnectorConfig ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: connectorConfig
          schema:
            $ref: '#/definitions/models.ConnectorConfig'
            type: object
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get an connectorConfig definition
      tags:
      - ConnectorConfigs
  /engine/connectorconfigs/{name}:
    delete:
      description: Delete an connectorConfig definition
      parameters:
      - description: ConnectorConfig ID
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Delete an connectorConfig definition
      tags:
      - ConnectorConfigs
    put:
      consumes:
      - application/json
      description: Create or remplace an connectorConfig definition
      parameters:
      - description: ConnectorConfig ID
        in: path
        name: name
        required: true
        type: string
      - description: ConnectorConfig definition (json)
        in: body
        name: connectorConfig
        required: true
        schema:
          $ref: '#/definitions/models.ConnectorConfig'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: connectorConfig
          schema:
            $ref: '#/definitions/models.ConnectorConfig'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create or remplace an connectorConfig definition
      tags:
      - ConnectorConfigs
  /engine/externalconfigs:
    get:
      description: Get all externalConfig definitions
      produces:
      - application/json
      responses:
        "200":
          description: list of all externalConfigs
          schema:
            items:
              $ref: '#/definitions/models.ExternalConfig'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all externalConfig definitions
      tags:
      - ExternalConfigs
    post:
      consumes:
      - application/json
      description: Create a new externalConfig definition
      parameters:
      - description: ExternalConfig definition (json)
        in: body
        name: externalConfig
        required: true
        schema:
          $ref: '#/definitions/models.ExternalConfig'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: externalConfig
          schema:
            $ref: '#/definitions/models.ExternalConfig'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create a new externalConfig definition
      tags:
      - ExternalConfigs
  /engine/externalconfigs/{id}:
    get:
      description: Get an externalConfig definition
      parameters:
      - description: ExternalConfig ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: externalConfig
          schema:
            $ref: '#/definitions/models.ExternalConfig'
            type: object
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get an externalConfig definition
      tags:
      - ExternalConfigs
  /engine/externalconfigs/{name}:
    delete:
      description: Delete an externalConfig definition
      parameters:
      - description: ExternalConfig ID
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Delete an externalConfig definition
      tags:
      - ExternalConfigs
    put:
      consumes:
      - application/json
      description: Create or remplace an externalConfig definition
      parameters:
      - description: ExternalConfig ID
        in: path
        name: name
        required: true
        type: string
      - description: ExternalConfig definition (json)
        in: body
        name: externalConfig
        required: true
        schema:
          $ref: '#/definitions/models.ExternalConfig'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: externalConfig
          schema:
            $ref: '#/definitions/models.ExternalConfig'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create or remplace an externalConfig definition
      tags:
      - ExternalConfigs
  /engine/externalconfigs/name/{name}:
    get:
      description: Get an externalConfig definition
      parameters:
      - description: ExternalConfig Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: externalConfig
          schema:
            $ref: '#/definitions/models.ExternalConfig'
            type: object
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get an externalConfig definition
      tags:
      - ExternalConfigs
  /engine/facts:
    get:
      description: Get all fact definitions
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all fact definitions
      tags:
      - Facts
    post:
      consumes:
      - application/json
      description: Create a new fact definition
      parameters:
      - description: Fact definition (json)
        in: body
        name: fact
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create a new fact definition
      tags:
      - Facts
  /engine/facts/{id}:
    delete:
      description: Delete a fact definition
      parameters:
      - description: Fact ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Delete a fact definition
      tags:
      - Facts
    get:
      description: Get a fact definition
      parameters:
      - description: Fact ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get a fact definition
      tags:
      - Facts
    put:
      consumes:
      - application/json
      description: Create or remplace a fact definition
      parameters:
      - description: Fact ID
        in: path
        name: id
        required: true
        type: string
      - description: Fact definition (json)
        in: body
        name: fact
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create or remplace a fact definition
      tags:
      - Facts
  /engine/facts/{id}/es:
    get:
      description: Execute a fact with a given timestamp
      parameters:
      - description: Fact ID
        in: path
        name: id
        required: true
        type: string
      - description: Find fact by it's name
        in: query
        name: byName
        type: string
      - description: Optional SituationID
        in: query
        name: situationid
        type: string
      - description: Optional InstanceID
        in: query
        name: instanceid
        type: string
      - description: Timestamp used for the fact execution
        in: query
        name: time
        required: true
        type: string
      - description: 'Cache maximum age in minutes(go duration: 10m, 1h, ...). If
          unset, use cache with no limit of age. If set to 0, disable cache'
        in: query
        name: cache
        type: string
      - description: Hit per page
        in: query
        name: nhit
        type: integer
      - description: Offset number
        in: query
        name: offset
        type: integer
      - description: 'Placeholders (format: key1:value1,key2:value2)'
        in: query
        name: placeholders
        type: string
      - description: Debug true/false
        in: query
        name: debug
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Execute a fact with a given timestamp
      tags:
      - Facts
  /engine/facts/{id}/execute:
    get:
      description: Execute a fact with a given timestamp
      parameters:
      - description: Fact ID
        in: path
        name: id
        required: true
        type: string
      - description: Find fact by it's name
        in: query
        name: byName
        type: string
      - description: Timestamp used for the fact execution
        in: query
        name: time
        required: true
        type: string
      - description: 'Cache maximum age in minutes(go duration: 10m, 1h, ...). If
          unset, use cache with no limit of age. If set to 0, disable cache'
        in: query
        name: cache
        type: string
      - description: Hit per page
        in: query
        name: nhit
        type: integer
      - description: Offset number
        in: query
        name: offset
        type: integer
      - description: 'Placeholders (format: key1:value1,key2:value2)'
        in: query
        name: placeholders
        type: string
      - description: Debug true/false
        in: query
        name: debug
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Execute a fact with a given timestamp
      tags:
      - Facts
  /engine/facts/{id}/hits:
    get:
      description: Execute a fact and restitue the hits
      parameters:
      - description: Fact ID
        in: path
        name: id
        required: true
        type: string
      - description: Timestamp used for the fact execution
        in: query
        name: time
        required: true
        type: string
      - description: Hit per page
        in: query
        name: nhit
        type: integer
      - description: Offset number
        in: query
        name: offset
        type: integer
      - description: Situation Id, necessary if the fact is template
        in: query
        name: situationId
        type: string
      - description: Situation instance Id if applicable
        in: query
        name: situationInstanceId
        type: string
      - description: Debug true/false
        in: query
        name: debug
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Execute a fact and restitue the hits
      tags:
      - Facts
  /engine/facts/execute:
    post:
      description: Execute a fact with a given timestamp
      parameters:
      - description: Fact definition (json)
        in: body
        name: fact
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      - description: Timestamp used for the fact execution
        in: query
        name: time
        required: true
        type: string
      - description: Hit per page
        in: query
        name: nhit
        type: integer
      - description: Offset number
        in: query
        name: offset
        type: integer
      - description: Placeholders (format key1:value1,key2:value2)
        in: query
        name: placeholders
        type: string
      - description: Debug true/false
        in: query
        name: debug
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Execute a fact with a given timestamp
      tags:
      - Facts
  /engine/facts/validate:
    post:
      consumes:
      - application/json
      description: Validate a new fact definition
      parameters:
      - description: Fact definition (json)
        in: body
        name: fact
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Validate a new fact definition
      tags:
      - Facts
  /engine/issues:
    get:
      description: Get issues by issues states (paginated)
      parameters:
      - description: 'Issue states (comma separated) (Available: open, draft, closedfeedback,
          closednofeedback, closedtimeout)'
        in: query
        name: states
        required: true
        type: string
      - description: 'Result limit (default: 50)'
        in: query
        name: limit
        type: string
      - description: 'Result offset (default: 0)'
        in: query
        name: offset
        type: string
      - description: 'Result offset (example: ''sort_by=desc(last_modified),asc(id)'')'
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get issues by issues states (paginated)
      tags:
      - Issues
    post:
      consumes:
      - application/json
      description: Creates an issue
      parameters:
      - description: Issue (json)
        in: body
        name: issue
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Creates an issue
      tags:
      - Issues
  /engine/issues/{id}:
    get:
      description: Get an issue
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get an issue
      tags:
      - Issues
  /engine/issues/{id}/close:
    post:
      consumes:
      - application/json
      description: Close an issue without feedback
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      - description: Close reason (json)
        in: body
        name: reason
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Close an issue without feedback
      tags:
      - Issues
  /engine/issues/{id}/comment:
    put:
      consumes:
      - application/json
      description: Update an issue comment
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      - description: Comment to update
        in: body
        name: reason
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Update an issue comment
      tags:
      - Issues
  /engine/issues/{id}/detection/feedback:
    post:
      consumes:
      - application/json
      description: Add a new detection feedback on an issue (or replace an existing
        one if the user already made a feedback)
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      - description: Rating
        in: body
        name: reason
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Add a new detection feedback
      tags:
      - Issues
  /engine/issues/{id}/draft:
    post:
      consumes:
      - application/json
      description: Post a rootcauses/actions recommendation tree as a feedback draft
        on an issue
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      - description: Draft Recommendation tree (json)
        in: body
        name: issue
        required: true
        schema:
          $ref: '#/definitions/models.FrontRecommendation'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Send a rootcauses/actions feedback draft on an issue
      tags:
      - Issues
  /engine/issues/{id}/facts_history:
    get:
      description: Get the facts history for an issue
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "404":
          description: Status Not Found
        "500":
          description: Status Internal Server Error
      security:
      - Bearer: []
      summary: Get the facts history for an issue
      tags:
      - Issues
  /engine/issues/{id}/feedback:
    post:
      consumes:
      - application/json
      description: Post a rootcauses/actions recommendation tree as a feedback on
        an issue
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      - description: Recommendation tree (json)
        in: body
        name: issue
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Send a rootcauses/actions feedback on an issue
      tags:
      - Issues
  /engine/issues/{id}/history:
    get:
      description: Get an issue history
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get an issue history
      tags:
      - Issues
  /engine/issues/{id}/recommendation:
    get:
      consumes:
      - application/json
      description: Generate the rootcauses/actions recommendation tree for an issue
      parameters:
      - description: Issue ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: recommendation
          schema:
            $ref: '#/definitions/models.FrontRecommendation'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Generate the rootcauses/actions recommendation tree
      tags:
      - Issues
  /engine/models:
    get:
      description: Get all model definitions
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all model definitions
      tags:
      - Models
    post:
      consumes:
      - application/json
      description: Create a new model definition
      parameters:
      - description: Model definition (json)
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create a new model definition
      tags:
      - Models
  /engine/models/{id}:
    delete:
      description: Delete a model definition
      parameters:
      - description: Model ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Delete a model definition
      tags:
      - Models
    get:
      description: Get a model definition
      parameters:
      - description: Model ID
        in: path
        name: id
        required: true
        type: string
      - description: Find model by it's name
        in: query
        name: byName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get a model definition
      tags:
      - Models
    put:
      consumes:
      - application/json
      description: Create or remplace a model definition
      parameters:
      - description: Model ID
        in: path
        name: id
        required: true
        type: string
      - description: Model definition (json)
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create or remplace a model definition
      tags:
      - Models
  /engine/models/validate:
    post:
      consumes:
      - application/json
      description: Validate a new model definition
      parameters:
      - description: Model definition (json)
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Validate a new model definition
      tags:
      - Models
  /engine/notifications:
    get:
      description: Get all notifications of the authentified user
      parameters:
      - description: 'Notification maximum age (use duration format, ex: 48h)'
        in: query
        name: maxage
        type: string
      - description: Hit per page
        in: query
        name: nhit
        type: integer
      - description: Offset number for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: list of notifications
          schema:
            items:
              $ref: '#/definitions/notification.FrontNotification'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all notifications
      tags:
      - Notifications
  /engine/notifications/{id}/read:
    put:
      description: Mark a notification as "read"
      parameters:
      - description: notification ID
        in: path
        name: id
        type: integer
      - description: notification's read property given value
        in: query
        name: status
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status bad request
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Update the "read" status of the notification
      tags:
      - Notifications
  /engine/notifications/sse:
    get:
      description: Register a new client to the notifications system using SSE
      parameters:
      - description: Json Web Token
        in: query
        name: jwt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Register a new client to the notifications system using SSE
      tags:
      - Notifications
  /engine/notifications/trigger:
    post:
      consumes:
      - application/json
      description: Generate a new NotifyTask with a default message for testing
      parameters:
      - description: Notifier cache key
        in: query
        name: key
        required: true
        type: string
      - description: Notify task definition (json)
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Send a notification
      tags:
      - Notifications
  /engine/notifications/ws:
    get:
      description: Register a new client to the notifications system using WS
      parameters:
      - description: Json Web Token
        in: query
        name: jwt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Register a new client to the notifications system using WS
      tags:
      - Notifications
  /engine/rootcauses:
    get:
      description: Get all rootcause definitions
      produces:
      - application/json
      responses:
        "200":
          description: list of rootcauses
          schema:
            items:
              $ref: '#/definitions/models.RootCause'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all rootcause definitions
      tags:
      - RootCauses
    post:
      consumes:
      - application/json
      description: Create a new rootcause definition
      parameters:
      - description: RootCause definition (json)
        in: body
        name: rootcause
        required: true
        schema:
          $ref: '#/definitions/models.RootCause'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: rootcause
          schema:
            $ref: '#/definitions/models.RootCause'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create a new rootcause definition
      tags:
      - RootCauses
  /engine/rootcauses/{id}:
    delete:
      description: Delete a rootcause definition
      parameters:
      - description: RootCause ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Delete a rootcause definition
      tags:
      - RootCauses
    get:
      description: Get a rootcause definition
      parameters:
      - description: RootCause ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: rootcause
          schema:
            $ref: '#/definitions/models.RootCause'
            type: object
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get a rootcause definition
      tags:
      - RootCauses
    put:
      consumes:
      - application/json
      description: Create or remplace a rootcause definition
      parameters:
      - description: RootCause ID
        in: path
        name: id
        required: true
        type: string
      - description: RootCause definition (json)
        in: body
        name: rootcause
        required: true
        schema:
          $ref: '#/definitions/models.RootCause'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: rootcause
          schema:
            $ref: '#/definitions/models.RootCause'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create or remplace a rootcause definition
      tags:
      - RootCauses
  /engine/rootcauses/validate:
    post:
      consumes:
      - application/json
      description: Validate a new rootcause definition
      parameters:
      - description: RootCause definition (json)
        in: body
        name: rootcause
        required: true
        schema:
          $ref: '#/definitions/models.RootCause'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: rootcause
          schema:
            $ref: '#/definitions/models.RootCause'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Validate a new rootcause definition
      tags:
      - RootCauses
  /engine/rules:
    get:
      description: Get all rules from rules repository
      produces:
      - application/json
      responses:
        "200":
          description: list of rules
          schema:
            items:
              $ref: '#/definitions/rule.Rule'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all rules
      tags:
      - Rules
    post:
      consumes:
      - application/json
      description: creates new rule
      parameters:
      - description: Rule definition (json)
        in: body
        name: rule
        required: true
        schema:
          $ref: '#/definitions/rule.Rule'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: rule
          schema:
            $ref: '#/definitions/rule.Rule'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status Internal Server Error
      security:
      - Bearer: []
      summary: create rule
      tags:
      - Rules
  /engine/rules/{id}:
    delete:
      description: delete rule
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status Internal Server Error
      security:
      - Bearer: []
      summary: delete rule
      tags:
      - Rules
    get:
      description: Get a specific rule by it's ID
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: rule
          schema:
            $ref: '#/definitions/rule.Rule'
            type: object
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get a rule
      tags:
      - Rules
    put:
      consumes:
      - application/json
      description: Create or remplace a rule definition
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      - description: Rule definition (json)
        in: body
        name: rule
        required: true
        schema:
          $ref: '#/definitions/rule.Rule'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: rule
          schema:
            $ref: '#/definitions/rule.Rule'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create or remplace a rule definition
      tags:
      - Rules
  /engine/rules/{id}/situations:
    get:
      description: Get the list of situatons associated to a rule
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: list of situations
          schema:
            items:
              $ref: '#/definitions/situation.Situation'
            type: array
        "400":
          description: Status Bad Request
        "401":
          description: Status Unauthorized
      security:
      - Bearer: []
      summary: Get the list of situatons associated to a rule
      tags:
      - Rules
    post:
      description: Add the rule at the end of the rules list of each situation
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      - description: Situation association
        in: body
        name: situationIds
        required: true
        schema:
          $ref: '#/definitions/%7Barray%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "401":
          description: Status Unauthorized
      security:
      - Bearer: []
      summary: Add the rule at the end of the rules list of each situation
      tags:
      - Rules
  /engine/rules/{id}/versions/{versionid}:
    get:
      description: Get a specific rule by it's ID
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: rule
          schema:
            $ref: '#/definitions/rule.Rule'
            type: object
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get a rule
      tags:
      - Rules
  /engine/rules/validate:
    post:
      consumes:
      - application/json
      description: validate a new rule definition
      parameters:
      - description: Rule definition (json)
        in: body
        name: rule
        required: true
        schema:
          $ref: '#/definitions/rule.Rule'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: rule
          schema:
            $ref: '#/definitions/rule.Rule'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status Internal Server Error
      security:
      - Bearer: []
      summary: validate a new rule definition
      tags:
      - Rules
  /engine/scheduler/jobs:
    get:
      description: Get all JobSchedules from scheduler repository
      produces:
      - application/json
      responses:
        "200":
          description: list of schedules
          schema:
            items:
              $ref: '#/definitions/scheduler.InternalSchedule'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all JobSchedules
      tags:
      - Scheduler
    post:
      consumes:
      - application/json
      description: creates new JobSchedule
      parameters:
      - description: JobSchedule definition (json)
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/scheduler.InternalSchedule'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: schedule
          schema:
            $ref: '#/definitions/scheduler.InternalSchedule'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status Internal Server Error
      security:
      - Bearer: []
      summary: create JobSchedule
      tags:
      - Scheduler
  /engine/scheduler/jobs/{id}:
    delete:
      description: delete JobSchedule
      parameters:
      - description: JobSchedule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status Internal Server Error
      security:
      - Bearer: []
      summary: delete JobSchedule
      tags:
      - Scheduler
    get:
      description: Get a specific JobSchedule by it's ID
      parameters:
      - description: job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: schedule
          schema:
            $ref: '#/definitions/scheduler.InternalSchedule'
            type: object
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get a JobSchedule
      tags:
      - Scheduler
    put:
      consumes:
      - application/json
      description: Create or remplace a JobSchedule
      parameters:
      - description: JobSchedule ID
        in: path
        name: id
        required: true
        type: string
      - description: JobSchedule (json)
        in: body
        name: rule
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: schedule
          schema:
            $ref: '#/definitions/scheduler.InternalSchedule'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Create or remplace a JobSchedule
      tags:
      - Scheduler
  /engine/scheduler/jobs/validate:
    post:
      consumes:
      - application/json
      description: validate a new JobSchedule definition
      parameters:
      - description: JobSchedule definition (json)
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/scheduler.InternalSchedule'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: schedule
          schema:
            $ref: '#/definitions/scheduler.InternalSchedule'
            type: object
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: validate a new JobSchedule definition
      tags:
      - Scheduler
  /engine/scheduler/start:
    post:
      description: Start the fact scheduler
      responses:
        "200":
          description: Status OK
      security:
      - Bearer: []
      summary: Start the scheduler
      tags:
      - Scheduler
  /engine/scheduler/trigger:
    post:
      description: |-
        <b>Force facts calculation pipeline</b>
        Example :
        <pre>{"jobtype":"fact","job":{"facts_ids":["fact_1","fact_2"]}}
        {"jobtype":"baseline","job":{"baselines":{"3":["by_day","by_day_week"]}}}</pre>
      parameters:
      - description: JobSchedule definition (json)
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/scheduler.InternalSchedule'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Force facts calculation pipeline
      tags:
      - Scheduler
  /engine/search/last:
    get:
      consumes:
      - application/json
      description: query situation history data
      parameters:
      - description: situationid
        in: query
        name: situationid
        type: integer
      - description: situationinstanceid
        in: query
        name: situationinstanceid
        type: integer
      - description: time.Time
        in: query
        name: maxdate
        type: string
      - description: time.Time
        in: query
        name: mindate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: query result
          schema:
            items:
              $ref: '#/definitions/search.QueryResult'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: query situation history data
      tags:
      - Search
  /engine/search/last/bycustominterval:
    get:
      consumes:
      - application/json
      description: query situation history data
      parameters:
      - description: situationid
        in: query
        name: situationid
        type: integer
      - description: situationinstanceid
        in: query
        name: situationinstanceid
        type: integer
      - description: time.Time
        in: query
        name: maxdate
        type: string
      - description: time.Time
        in: query
        name: mindate
        type: string
      - description: time.Time
        in: query
        name: referencedate
        required: true
        type: string
      - description: time.Duration
        in: query
        name: interval
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: query result
          schema:
            items:
              $ref: '#/definitions/search.QueryResult'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: query situation history data
      tags:
      - Search
  /engine/search/last/byinterval:
    get:
      consumes:
      - application/json
      description: query situation history data
      parameters:
      - description: situationid
        in: query
        name: situationid
        type: integer
      - description: situationinstanceid
        in: query
        name: situationinstanceid
        type: integer
      - description: time.Time
        in: query
        name: maxdate
        type: string
      - description: time.Time
        in: query
        name: mindate
        type: string
      - description: year | quarter | month | week | day | hour | minute
        in: query
        name: interval
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: query result
          schema:
            items:
              $ref: '#/definitions/search.QueryResult'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: query situation history data
      tags:
      - Search
  /engine/security/myself:
    get:
      description: Gets un user with the specified id.
      produces:
      - application/json
      responses:
        "200":
          description: status OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get an user
      tags:
      - Users
  /engine/situations:
    get:
      description: Get all situation definitions
      produces:
      - application/json
      responses:
        "200":
          description: list of situations
          schema:
            items:
              $ref: '#/definitions/situation.Situation'
            type: array
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Get all situation definitions
      tags:
      - Situations
    post:
      consumes:
      - application/json
      description: Creates a situation definition
      parameters:
      - description: Find fact by it's name
        in: query
        name: factsByName
        type: string
      - description: Situation definition (json)
        in: body
        name: situation
        required: true
        schema:
          $ref: '#/definitions/situation.Situation'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: situation
          schema:
            $ref: '#/definitions/situation.Situation'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Creates a situation definition
      tags:
      - Situations
  /engine/situations/{id}:
    delete:
      description: Delete a situation definition
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Delete a situation definition
      tags:
      - Situations
    get:
      description: Get a situation definition
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: situation
          schema:
            $ref: '#/definitions/situation.Situation'
            type: object
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get a situation definitionM
      tags:
      - Situations
    put:
      consumes:
      - application/json
      description: replace a situation definition
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      - description: Situation definition (json)
        in: body
        name: situation
        required: true
        schema:
          $ref: '#/definitions/situation.Situation'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: situation
          schema:
            $ref: '#/definitions/situation.Situation'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: replace a situation definition
      tags:
      - Situations
  /engine/situations/{id}/evaluation/{instanceid}:
    get:
      description: Get the last evaluation of a situation
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      - description: Situation Template Instance ID
        in: path
        name: instanceid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get the last evaluation of a situation
      tags:
      - Situations
  /engine/situations/{id}/facts:
    get:
      description: Get the list of facts for the evaluation of a situation
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "401":
          description: Status Unauthorized
      security:
      - Bearer: []
      summary: Get the list of facts for the evaluation of a situation
      tags:
      - Situations
  /engine/situations/{id}/instances:
    get:
      description: Get the list of situation template instances
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/situation.TemplateInstance'
            type: array
        "400":
          description: Status Bad Request
        "401":
          description: Status Unauthorized
      security:
      - Bearer: []
      summary: Get the list of situation template instances
      tags:
      - Situations
    post:
      consumes:
      - application/json
      description: Creates a situation template instance
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      - description: Situation template instance (json)
        in: body
        name: templateInstance
        required: true
        schema:
          $ref: '#/definitions/situation.TemplateInstance'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: situation template instance
          schema:
            $ref: '#/definitions/situation.TemplateInstance'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Creates a situation template instance
      tags:
      - Situations
    put:
      consumes:
      - application/json
      description: set the template instances of the situation
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      - description: Situation template instance list (json array)
        in: body
        name: templateInstances
        required: true
        schema:
          $ref: '#/definitions/%7Barray%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: set the template instances of the situation
      tags:
      - Situations
  /engine/situations/{id}/instances/{instanceid}:
    delete:
      description: Delete a situation template instance
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      - description: Situation Template Instance ID
        in: path
        name: instanceid
        required: true
        type: string
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Delete a situation template instance
      tags:
      - Situations
    put:
      consumes:
      - application/json
      description: replace a situation template instance
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      - description: Situation Template Instance ID
        in: path
        name: instanceid
        required: true
        type: string
      - description: Situation template instance (json)
        in: body
        name: templateInstance
        required: true
        schema:
          $ref: '#/definitions/situation.TemplateInstance'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: situation template instance
          schema:
            $ref: '#/definitions/situation.TemplateInstance'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: replace a situation template instance
      tags:
      - Situations
  /engine/situations/{id}/rules:
    get:
      description: Get the list of rules for the evaluation of a situation
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/rule.Rule'
            type: array
        "400":
          description: Status Bad Request
        "401":
          description: Status Unauthorized
      security:
      - Bearer: []
      summary: Get the list of rules for the evaluation of a situation
      tags:
      - Situations
    put:
      description: Set the list of rules for the evaluation of a situation
      parameters:
      - description: Situation ID
        in: path
        name: id
        required: true
        type: string
      - description: Situation Rules
        in: body
        name: ruleIds
        required: true
        schema:
          $ref: '#/definitions/%7Barray%7D'
          type: object
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
        "401":
          description: Status Unauthorized
      security:
      - Bearer: []
      summary: Set the list of rules for the evaluation of a situation
      tags:
      - Situations
  /engine/situations/validate:
    post:
      consumes:
      - application/json
      description: Validate a new situation definition
      parameters:
      - description: Situation definition (json)
        in: body
        name: situation
        required: true
        schema:
          $ref: '#/definitions/situation.Situation'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: situation
          schema:
            $ref: '#/definitions/situation.Situation'
            type: object
        "400":
          description: Status Bad Request
        "500":
          description: Status" internal server error
      security:
      - Bearer: []
      summary: Validate a new situation definition
      tags:
      - Situations
  /isalive:
    get:
      description: allows to check if the API is alive
      responses:
        "200":
          description: Status OK
      summary: Check if alive
      tags:
      - System
  /log_level:
    get:
      description: Get current logging level
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Get Log Level
      tags:
      - Logs
    put:
      description: |-
        Set logging level
        Example :
        <pre>{"level":"info"}</pre>
      parameters:
      - description: Level (json)
        in: body
        name: level
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      security:
      - Bearer: []
      summary: Set Log Level
      tags:
      - Logs
  /login:
    post:
      description: |-
        Authenticate using basic auth
        Example :
        <pre>{"login":"myuser","password":"mypassword"}</pre>
      parameters:
      - description: Credentials (json)
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/interface%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "400":
          description: Status Bad Request
      summary: Login
      tags:
      - Security
  /service/aggregates:
    post:
      description: Receive aggregates to be evaluated
      parameters:
      - description: query (json)
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/[]ExternalAggregate'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Receive aggregates to be evaluated
      tags:
      - Service
  /service/objects:
    post:
      description: Receive objects to be evaluated
      parameters:
      - description: Fact object name
        in: query
        name: fact
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Status OK
        "500":
          description: internal server error
      security:
      - Bearer: []
      summary: Receive objects to be evaluated
      tags:
      - Service
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
