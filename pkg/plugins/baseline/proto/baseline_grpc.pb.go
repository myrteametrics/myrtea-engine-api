// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proto/baseline.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Baseline_GetBaselineValues_FullMethodName   = "/proto.Baseline/GetBaselineValues"
	Baseline_BuildBaselineValues_FullMethodName = "/proto.Baseline/BuildBaselineValues"
)

// BaselineClient is the client API for Baseline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaselineClient interface {
	// rpc GetBaselineValue(BaselineValueRequest) returns (BaselineValue)
	GetBaselineValues(ctx context.Context, in *BaselineValueRequest, opts ...grpc.CallOption) (*BaselineValues, error)
	BuildBaselineValues(ctx context.Context, in *BuildBaselineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type baselineClient struct {
	cc grpc.ClientConnInterface
}

func NewBaselineClient(cc grpc.ClientConnInterface) BaselineClient {
	return &baselineClient{cc}
}

func (c *baselineClient) GetBaselineValues(ctx context.Context, in *BaselineValueRequest, opts ...grpc.CallOption) (*BaselineValues, error) {
	out := new(BaselineValues)
	err := c.cc.Invoke(ctx, Baseline_GetBaselineValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baselineClient) BuildBaselineValues(ctx context.Context, in *BuildBaselineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Baseline_BuildBaselineValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaselineServer is the server API for Baseline service.
// All implementations must embed UnimplementedBaselineServer
// for forward compatibility
type BaselineServer interface {
	// rpc GetBaselineValue(BaselineValueRequest) returns (BaselineValue)
	GetBaselineValues(context.Context, *BaselineValueRequest) (*BaselineValues, error)
	BuildBaselineValues(context.Context, *BuildBaselineRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBaselineServer()
}

// UnimplementedBaselineServer must be embedded to have forward compatible implementations.
type UnimplementedBaselineServer struct {
}

func (UnimplementedBaselineServer) GetBaselineValues(context.Context, *BaselineValueRequest) (*BaselineValues, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaselineValues not implemented")
}
func (UnimplementedBaselineServer) BuildBaselineValues(context.Context, *BuildBaselineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildBaselineValues not implemented")
}
func (UnimplementedBaselineServer) mustEmbedUnimplementedBaselineServer() {}

// UnsafeBaselineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaselineServer will
// result in compilation errors.
type UnsafeBaselineServer interface {
	mustEmbedUnimplementedBaselineServer()
}

func RegisterBaselineServer(s grpc.ServiceRegistrar, srv BaselineServer) {
	s.RegisterService(&Baseline_ServiceDesc, srv)
}

func _Baseline_GetBaselineValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaselineValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaselineServer).GetBaselineValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Baseline_GetBaselineValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaselineServer).GetBaselineValues(ctx, req.(*BaselineValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baseline_BuildBaselineValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildBaselineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaselineServer).BuildBaselineValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Baseline_BuildBaselineValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaselineServer).BuildBaselineValues(ctx, req.(*BuildBaselineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Baseline_ServiceDesc is the grpc.ServiceDesc for Baseline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Baseline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Baseline",
	HandlerType: (*BaselineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBaselineValues",
			Handler:    _Baseline_GetBaselineValues_Handler,
		},
		{
			MethodName: "BuildBaselineValues",
			Handler:    _Baseline_BuildBaselineValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/baseline.proto",
}
